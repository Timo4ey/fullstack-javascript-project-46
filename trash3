import sortArrString from './sortArrString.js';
import getKeys from './getKeys.js';
import {
  HasProperty,
  isValuesAreEqual,
  isBothObjectHaveProperty,
  isWhichObject,
  isObject,
} from '../predicates/predicates.js';

import { pushFormat, pushFormatPure } from './pushFormat.js';

const filesComparer = (file1, file2) => {
  const arr = [];
  const inner = (item1, item2, depth = 2) => {
    const output = [];
    const keys = getKeys(item1, item2).sort(sortArrString);
    // eslint-disable-next-line no-restricted-syntax
    for (const key of keys) {
      // has has eq eq

      if (isBothObjectHaveProperty(item1, item2, key)) {
        // eslint-disable-next-line default-case
        switch (isWhichObject(item1[key], item2[key])) {
          case 'none':
            if (isValuesAreEqual(item1, item2, key)) {
              output.push(...pushFormat(key, null, depth, ' ', item1[key]));
            } else if (!isValuesAreEqual(item1, item2, key)) {
              output.push(
                ...pushFormat(key, null, depth, '-+', item1[key], item2[key]),
              );
            }
            break;
          case 'file2':
            if (!isValuesAreEqual(item1, item2, key)) {
              output.push(...pushFormat(key, inner, depth, ' ', item1[key]));
              output.push(...pushFormat(key, null, depth, '+', item2[key]));
            }
            break;
          case 'file1':
            if (!isValuesAreEqual(item1, item2, key)) {
              output.push(...pushFormat(key, null, depth, '-', item1[key]));
              output.push(...pushFormat(key, inner, depth, ' ', item2[key]));
            }

            break;
          case 'both':
            if (!isValuesAreEqual(item1, item2, key)) {
              output.push(
                ...pushFormat(key, inner, depth, ' ', item1[key], item2[key]),
              );
            }
            break;
        }
      }
      if (isWhichObject(item1[key], item2[key]) !== 'none' && !(key in item2)) {
        output.push(
          // pay attention to minus a1
          `${' '.repeat(depth)}- ${key}: {\n${pushFormatPure(
            item1[key],
            depth - 1,
          )}${' '.repeat(depth + depth)}}\n`,
        );
      } else if (
        isWhichObject(item1[key], item2[key]) !== 'none' &&
        !(key in item1)
      ) {
        output.push(
          `${' '.repeat(depth)}+ ${key}: {\n${pushFormatPure(
            item2[key],
            depth,
          )}${' '.repeat(depth + depth)}}\n`,
        );
      } else if (isObject(item1[key]) && !isObject(item2[key])) {
        output.push(...pushFormat(key, inner, depth + 2, '-', item1[key], {}));
      } else if (!isObject(item1[key]) && isObject(item2[key])) {
        output.push(...pushFormat(key, inner, depth + 2, '+', {}, item2[key]));
      } else if (
        HasProperty(item1, key) &&
        !HasProperty(item2, key) &&
        getKeys(item1).length !== 0
      ) {
        output.push(...pushFormat(key, null, depth, '-', item1[key]));
      } else if (
        !HasProperty(item1, key) &&
        HasProperty(item2, key) &&
        getKeys(item2).length !== 0
      ) {
        output.push(...pushFormat(key, null, depth, '+', item2[key]));
      } else if (
        !HasProperty(item1, key) &&
        getKeys(item1).length === 0 &&
        HasProperty(item2, key)
      ) {
        output.push(...pushFormat(key, null, depth, ' ', item2[key]));
      } else if (
        HasProperty(item1, key) &&
        getKeys(item2).length === 0 &&
        !HasProperty(item2, key)
      ) {
        output.push(...pushFormat(key, null, depth, ' ', item1[key]));
      }
    }

    return output;
  };
  arr.push(inner(file1, file2));
  arr.unshift('{\n');
  arr.push('}');
  return arr.join().replace(/,/g, '');
};

// console.log(filesComparer(testOneFile1, testOneFile2));

export default filesComparer;
