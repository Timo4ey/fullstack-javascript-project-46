import sortArrString from './sortArrString.js';
import getKeys from './getKeys.js';
import {
  HasProperty,
  isValuesAreEqual,
  isBothObjectHaveProperty,
  isWhichObject,
  isObject,
} from '../predicates/predicates.js';

import _ from 'lodash';
// val val

import { pushFormat, pushFormatPure } from './pushFormat.js';

const filesComparer = (file1, file2) => {
  const arr = [];
  const inner = (item1, item2, depth = 2) => {
    const output = [];
    const keys = getKeys(item1, item2).sort(sortArrString);
    // eslint-disable-next-line no-restricted-syntax, no-unreachable-loop
    for (const key of keys) {
      // has has eq eq
      // eslint-disable-next-line default-case
      switch (isWhichObject(item1, item2)) {
        case 'both':
          // eslint-disable-next-line default-case
          let ans = isWhichObject(item1[key], item2[key]);
          let v1 = item1[key];
          let v2 = item2[key];
          // Primitive
          // eslint-disable-next-line no-self-compare
          if (ans === 'none') {
            // eslint-disable-next-line no-self-compare
            if (_.isObject(item2[key]) === _.isObject(item2[key])) {
              if (_.isEqual(item1[key], item2[key])) {
                output.push(...pushFormat(key, null, depth, ' ', item1[key]));
              } else if (HasProperty(item1, key) && !HasProperty(item2, key)) {
                output.push(...pushFormat(key, null, depth, '-', item1[key]));
              } else if (!HasProperty(item1, key) && HasProperty(item2, key)) {
                output.push(...pushFormat(key, null, depth, '+', item2[key]));
              } else if (!_.isEqual(item1[key], item2[key])) {
                output.push(
                  ...pushFormat(key, null, depth, '-+', item1[key], item2[key]),
                );
              }
            } //
          }
          if (ans === 'left') {
            if (!HasProperty(item2, key)) {
              output.push(
                `${' '.repeat(depth)}  ${key}: {\n$${pushFormatPure(
                  item1[(key, depth + depth)],
                )}}${' '.repeat(depth + depth)}}\n`,
                // ...pushFormat(key, inner, depth + depth, '-', item1[key], {}),
              );
            } else if (!_.isEqual(item1[key], item2[key])) {
              output.push(
                ...pushFormat(key, inner, depth + 2, '-', item1[key], {}),
              );
              output.push(...pushFormat(key, null, depth, '+', item2[key]));
            }
          }
          if (ans === 'right') {
            if (!HasProperty(item1, key)) {
              output.push(
                ...pushFormat(key, inner, depth + 2, '+', item1[key], {}),
              );
            } else if (!_.isEqual(item2[key], item1[key])) {
              output.push(
                ...pushFormat(key, inner, depth + 2, '+', item1[key], {}),
              );
              output.push(...pushFormat(key, null, depth, '-', item1[key]));
            }
          }
          if (ans === 'both') {
            if (_.isEqual(item1[key], item2[key])) {
              output.push(
                ...pushFormat(key, inner, depth + 2, ' ', item1[key], {}),
              );
            } else if (!_.isEqual(item1[key], item2[key])) {
              output.push(
                ...pushFormat(key, inner, depth, ' ', item1[key], item2[key]),
              );
            }
          }

          break;
        case 'left':
          if (typeof item2 === 'string') {
            output.push(
              `${' '.repeat(depth)}-  ${key}: {\n${pushFormatPure(
                item1[key],
                depth + depth,
              )}}${' '.repeat(depth + depth)}}\n`,
            );
            output.push(...pushFormat(key, null, depth, '+', item2[key]));
          } else {
            output.push(
              `${' '.repeat(depth)}-  ${key}: {\n${pushFormatPure(
                item1[key],
                depth + depth,
              )}}${' '.repeat(depth + depth)}}\n`,
            );
          }
          break;
        case 'right':
          if (typeof item1 === 'string') {
            output.push(...pushFormat(key, null, depth, '-', item1[key]));
            output.push(
              `${' '.repeat(depth)}+  ${key}: {\n${pushFormatPure(
                item2[key],
                depth + depth,
              )}}${' '.repeat(depth + depth)}}\n`,
            );
          } else {
            output.push(
              `${' '.repeat(depth)}+  ${key}: {\n${pushFormatPure(
                item2[key],
                depth + depth,
              )}}${' '.repeat(depth + depth)}}\n`,
              // ...pushFormat(key, inner, depth + depth, '-', item1[key], {}),
            );
          }
          break;
        case 'none':
          if (typeof item1 === 'string' && typeof item2 === 'string') {
            output.push(...pushFormat(key, null, depth, '-', item1[key]));
            output.push(...pushFormat(key, null, depth, '+', item2[key]));
          } else if (typeof item1 === 'string' && typeof item2 !== 'string') {
            output.push(...pushFormat(key, null, depth, '-', item1[key]));
          } else {
            output.push(...pushFormat(key, null, depth, '+', item2[key]));
          }
          break;
      }
    }
    return output;
  };
  arr.push(inner(file1, file2));
  arr.unshift('{\n');
  arr.push('}');
  return arr.join().replace(/,/g, '');
};

// console.log(filesComparer(testOneFile1, testOneFile2));

export default filesComparer;
